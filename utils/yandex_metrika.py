import requests
import json
import sys
import os
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import YANDEX_METRIKA_TOKEN, YANDEX_METRIKA_COUNTER_ID

# –ë–∞–∑–æ–≤—ã–π URL API –Ø–Ω–¥–µ–∫—Å –ú–µ—Ç—Ä–∏–∫–∏
BASE_URL = "https://api-metrika.yandex.net/stat/v1/data"

def get_metrika_stats(date1: str, date2: str, metrics: List[str], dimensions: Optional[List[str]] = None, 
                     filters: Optional[str] = None, sort: Optional[str] = None, limit: int = 100) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –Ø–Ω–¥–µ–∫—Å –ú–µ—Ç—Ä–∏–∫–∏
    
    Args:
        date1: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
        date2: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
        metrics: –°–ø–∏—Å–æ–∫ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
        dimensions: –°–ø–∏—Å–æ–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        filters: –§–∏–ª—å—Ç—Ä—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        sort: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = {
            "ids": YANDEX_METRIKA_COUNTER_ID,
            "date1": date1,
            "date2": date2,
            "metrics": ",".join(metrics),
            "limit": limit
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if dimensions:
            params["dimensions"] = ",".join(dimensions)
        if filters:
            params["filters"] = filters
        if sort:
            params["sort"] = sort
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        headers = {
            "Authorization": f"OAuth {YANDEX_METRIKA_TOKEN}",
            "Content-Type": "application/json"
        }
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.get(BASE_URL, params=params, headers=headers)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –Ø–Ω–¥–µ–∫—Å –ú–µ—Ç—Ä–∏–∫–∏: {response.status_code}")
            print(response.text)
            return {"error": f"API error: {response.status_code}", "details": response.text}
        
        # –ü–∞—Ä—Å–∏–º JSON
        return response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –Ø–Ω–¥–µ–∫—Å –ú–µ—Ç—Ä–∏–∫–∏: {e}")
        return {"error": str(e)}

def get_daily_report() -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –æ—Ç—á–µ—Ç–æ–º
    """
    try:
        # –î–∞—Ç–∞ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
        yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
        stats = get_metrika_stats(
            date1=yesterday,
            date2=yesterday,
            metrics=["ym:s:visits", "ym:s:users", "ym:s:pageviews", "ym:s:bounceRate", "ym:s:avgVisitDurationSeconds"]
        )
        
        if "error" in stats:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {stats['error']}"
        
        # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        totals = stats.get("totals", [0, 0, 0, 0, 0])
        
        visits = totals[0]
        users = totals[1]
        pageviews = totals[2]
        bounce_rate = totals[3]
        avg_duration = totals[4]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã
        minutes = int(avg_duration // 60)
        seconds = int(avg_duration % 60)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞
        sources = get_metrika_stats(
            date1=yesterday,
            date2=yesterday,
            metrics=["ym:s:visits"],
            dimensions=["ym:s:trafficSource"],
            sort="-ym:s:visits",
            limit=5
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"üìä –û—Ç—á–µ—Ç –ø–æ –Ø–Ω–¥–µ–∫—Å –ú–µ—Ç—Ä–∏–∫–µ –∑–∞ {yesterday}\n\n"
        report += f"üë• –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏: {users}\n"
        report += f"üîÑ –í–∏–∑–∏—Ç—ã: {visits}\n"
        report += f"üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü: {pageviews}\n"
        report += f"‚Ü©Ô∏è –û—Ç–∫–∞–∑—ã: {bounce_rate:.2f}%\n"
        report += f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–∞–π—Ç–µ: {minutes} –º–∏–Ω {seconds} —Å–µ–∫\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö —Ç—Ä–∞—Ñ–∏–∫–∞
        if "error" not in sources and "data" in sources:
            report += "üîç –¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞:\n"
            for i, source in enumerate(sources["data"], 1):
                source_name = source["dimensions"][0]["name"]
                source_visits = source["metrics"][0]
                report += f"{i}. {source_name}: {source_visits} –≤–∏–∑–∏—Ç–æ–≤\n"
        
        return report
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}"

def get_weekly_report() -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –æ—Ç—á–µ—Ç–æ–º
    """
    try:
        # –î–∞—Ç—ã: –æ—Ç –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥ –¥–æ –≤—á–µ—Ä–∞
        yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
        week_ago = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
        stats = get_metrika_stats(
            date1=week_ago,
            date2=yesterday,
            metrics=["ym:s:visits", "ym:s:users", "ym:s:pageviews", "ym:s:bounceRate", "ym:s:avgVisitDurationSeconds"],
            dimensions=["ym:s:date"]
        )
        
        if "error" in stats:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {stats['error']}"
        
        # –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
        totals = stats.get("totals", [0, 0, 0, 0, 0])
        
        total_visits = totals[0]
        total_users = totals[1]
        total_pageviews = totals[2]
        avg_bounce_rate = totals[3]
        avg_duration = totals[4]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã
        minutes = int(avg_duration // 60)
        seconds = int(avg_duration % 60)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 —Å—Ç—Ä–∞–Ω–∏—Ü
        pages = get_metrika_stats(
            date1=week_ago,
            date2=yesterday,
            metrics=["ym:s:pageviews"],
            dimensions=["ym:s:pageTitle"],
            sort="-ym:s:pageviews",
            limit=5
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"üìà –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –Ø–Ω–¥–µ–∫—Å –ú–µ—Ç—Ä–∏–∫–µ ({week_ago} - {yesterday})\n\n"
        report += f"üë• –í—Å–µ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: {total_users}\n"
        report += f"üîÑ –í—Å–µ–≥–æ –≤–∏–∑–∏—Ç–æ–≤: {total_visits}\n"
        report += f"üëÅÔ∏è –í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {total_pageviews}\n"
        report += f"‚Ü©Ô∏è –°—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–æ–≤: {avg_bounce_rate:.2f}%\n"
        report += f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–∞–π—Ç–µ: {minutes} –º–∏–Ω {seconds} —Å–µ–∫\n\n"
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
        if "data" in stats:
            report += "üìÖ –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –ø–æ –¥–Ω—è–º:\n"
            for day_data in stats["data"]:
                date_str = day_data["dimensions"][0]["name"]
                date_obj = datetime.strptime(date_str, "%Y-%m-%d")
                formatted_date = date_obj.strftime("%d.%m")
                day_visits = day_data["metrics"][0]
                report += f"{formatted_date}: {day_visits} –≤–∏–∑–∏—Ç–æ–≤\n"
            
            report += "\n"
        
        # –¢–æ–ø —Å—Ç—Ä–∞–Ω–∏—Ü
        if "error" not in pages and "data" in pages:
            report += "üìë –¢–æ–ø —Å—Ç—Ä–∞–Ω–∏—Ü:\n"
            for i, page in enumerate(pages["data"], 1):
                page_title = page["dimensions"][0]["name"]
                page_views = page["metrics"][0]
                # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if len(page_title) > 40:
                    page_title = page_title[:37] + "..."
                report += f"{i}. {page_title}: {page_views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"
        
        return report
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}"

def get_monthly_report() -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –æ—Ç—á–µ—Ç–æ–º
    """
    try:
        # –î–∞—Ç—ã: –æ—Ç –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥ –¥–æ –≤—á–µ—Ä–∞
        yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
        month_ago = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –º–µ—Å—è—Ü
        stats = get_metrika_stats(
            date1=month_ago,
            date2=yesterday,
            metrics=["ym:s:visits", "ym:s:users", "ym:s:pageviews", "ym:s:bounceRate", "ym:s:avgVisitDurationSeconds"]
        )
        
        if "error" in stats:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {stats['error']}"
        
        # –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ –º–µ—Å—è—Ü
        totals = stats.get("totals", [0, 0, 0, 0, 0])
        
        total_visits = totals[0]
        total_users = totals[1]
        total_pageviews = totals[2]
        avg_bounce_rate = totals[3]
        avg_duration = totals[4]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã
        minutes = int(avg_duration // 60)
        seconds = int(avg_duration % 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
        devices = get_metrika_stats(
            date1=month_ago,
            date2=yesterday,
            metrics=["ym:s:visits"],
            dimensions=["ym:s:deviceCategory"],
            sort="-ym:s:visits"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        regions = get_metrika_stats(
            date1=month_ago,
            date2=yesterday,
            metrics=["ym:s:visits"],
            dimensions=["ym:s:regionCountry"],
            sort="-ym:s:visits",
            limit=5
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"üìä –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –Ø–Ω–¥–µ–∫—Å –ú–µ—Ç—Ä–∏–∫–µ ({month_ago} - {yesterday})\n\n"
        report += f"üë• –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: {total_users}\n"
        report += f"üîÑ –í—Å–µ–≥–æ –≤–∏–∑–∏—Ç–æ–≤: {total_visits}\n"
        report += f"üëÅÔ∏è –í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pageviews}\n"
        report += f"‚Ü©Ô∏è –°—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–æ–≤: {avg_bounce_rate:.2f}%\n"
        report += f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–∞–π—Ç–µ: {minutes} –º–∏–Ω {seconds} —Å–µ–∫\n\n"
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
        if "error" not in devices and "data" in devices:
            report += "üì± –í–∏–∑–∏—Ç—ã –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º:\n"
            for device in devices["data"]:
                device_name = device["dimensions"][0]["name"]
                device_visits = device["metrics"][0]
                device_percent = (device_visits / total_visits) * 100 if total_visits > 0 else 0
                report += f"{device_name}: {device_visits} ({device_percent:.1f}%)\n"
            
            report += "\n"
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        if "error" not in regions and "data" in regions:
            report += "üåé –¢–æ–ø —Ä–µ–≥–∏–æ–Ω–æ–≤:\n"
            for region in regions["data"]:
                region_name = region["dimensions"][0]["name"]
                region_visits = region["metrics"][0]
                region_percent = (region_visits / total_visits) * 100 if total_visits > 0 else 0
                report += f"{region_name}: {region_visits} ({region_percent:.1f}%)\n"
        
        return report
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}"

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
if __name__ == "__main__":
    daily_report = get_daily_report()
    print(daily_report) 